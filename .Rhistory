rm(list = ls())
# Load packages
library("prism")
library("raster")
library("dismo")
library("usdm")
library("car")
library("FactoMineR")
library("factoextra")
library("corrplot")
library("ENMTools")
library("vip")
library("pdp")
library("fastshap")
library("CalibratR")
library("maptools")
library("rgeos")
library("leaflet")
library("tidyverse")
# install.extras()
library("geodata")
library("terra")
library("rgdal")
library("sp")
library("ENMeval")
library("mecofun")
library("mgcv")
library("randomForest")
library("spThin")
# if( !("rJava" %in% rownames(installed.packages()))  ){
#   install.packages("rJava",repos="http://cran.r-project.org")
# }
# if(Sys.info()["sysname"] != "Windows" ){
#   dyn.load('/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/lib/server/libjvm.dylib')
# }
library("rJava")
# if( !file.exists(paste0(system.file("java", package="dismo"),"/maxent.jar"))  )   {
# utils::download.file(url="https://raw.githubusercontent.com/mrmaxent/Maxent/master/ArchivedReleases/3.3.3k/maxent.jar",
#                      destfile=paste0(system.file("java", package="dismo"),"/maxent.jar"),
#                      mode="wb") ## wb for binary file, otherwise maxent.jar can not execute
# }
# making a folder to store prism data
prism_set_dl_dir("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Clim")
# getting monthly data for mean temp and precipitation
# takes a long time the first time, but can skip when you have raster files saved on your computer.
# get_prism_monthlys(type = "tmean", years = 1895:2020, mon = 1:12, keepZip = FALSE)
# get_prism_monthlys(type = "ppt", years = 1895:2020, mon = 1:12, keepZip = FALSE)
# pulling out values to get normals for old and new time periods
tmean_annual_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020))))
tmean_spring_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020, mon = 1:4))))
tmean_summer_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020, mon = 5:8))))
tmean_autumn_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020, mon = 9:12))))
tmean_annual_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925))))
tmean_spring_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925, mon = 1:4))))
tmean_summer_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925, mon = 5:8))))
tmean_autumn_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925, mon = 9:12))))
# calculating the cumulative precipitation for each year and for each season within the year
ppt_annual_recent <- ppt_spring_recent <- ppt_summer_recent <- ppt_autumn_recent <- ppt_winter_recent<- list()
for(y in 1990:2020){
ppt_annual_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y))))
ppt_spring_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 1:4))))
ppt_summer_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 5:8))))
ppt_autumn_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 9:12))))
}
ppt_annual_old <- ppt_spring_old <- ppt_summer_old <- ppt_autumn_old <- ppt_winter_old<- list()
for(y in 1895:1925){
ppt_annual_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y))))
ppt_spring_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 1:4))))
ppt_summer_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 5:8))))
ppt_autumn_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 9:12)))) # including December here because the year needs to wrap around...
}
# Taking the mean of the cumulative precipation values
ppt_annual_recent_norm <- terra::mean(terra::rast(unlist(ppt_annual_recent)))
ppt_spring_recent_norm <- terra::mean(terra::rast(unlist(ppt_spring_recent)))
ppt_summer_recent_norm <- terra::mean(terra::rast(unlist(ppt_summer_recent)))
ppt_autumn_recent_norm <- terra::mean(terra::rast(unlist(ppt_autumn_recent)))
ppt_annual_old_norm <- terra::mean(terra::rast(unlist(ppt_annual_old)))
ppt_spring_old_norm <- terra::mean(terra::rast(unlist(ppt_spring_old)))
ppt_summer_old_norm <- terra::mean(terra::rast(unlist(ppt_summer_old)))
ppt_autumn_old_norm <- terra::mean(terra::rast(unlist(ppt_autumn_old)))
US_worldclim_recent_norm<-terra::rast(list(tmean_spring_recent_norm,tmean_summer_recent_norm,tmean_autumn_recent_norm,ppt_spring_recent_norm,ppt_summer_recent_norm,ppt_autumn_recent_norm))
US_worldclim_recent_norm_stack<-stack(US_worldclim_recent_norm)
# plot(US_worldclim_recent_norm_stack)
# (var_vif<-usdm::vifstep(US_worldclim_recent_norm_stack, th=10))
(vif <- vifcor(US_worldclim_recent_norm_stack, th=0.7))
US_worldclim_recent_norm_stack_vif<-terra::rast(list(tmean_spring_recent_norm,ppt_spring_recent_norm,ppt_summer_recent_norm))
names(US_worldclim_recent_norm_stack_vif) <- c("tmean_spring", "ppt_spring","ppt_summer")
US_worldclim_recent_norm_stack_final<-stack(US_worldclim_recent_norm_stack_vif)
US_worldclim_old_norm_stack_vif<-terra::rast(list(tmean_spring_old_norm,ppt_spring_old_norm,ppt_summer_old_norm))
names(US_worldclim_old_norm_stack_vif) <- c("tmean_spring", "ppt_spring","ppt_summer")
US_worldclim_old_norm_stack_final<-stack(US_worldclim_old_norm_stack_vif)
plot(US_worldclim_recent_norm_stack_final)
plot(US_worldclim_old_norm_stack_final)
endo_herb_georef<-read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/endo_herb_georef.csv", header=T)
endo_herb_georef
# dir.create("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence")
# aghy_occ_raw <- gbif(genus="Agrostis",species="hyemalis",download=TRUE)
load("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/aghy_occ_raw.rdata")
head(aghy_occ_raw) # to view the first few records the occurrence dataset use
aghy_occ <- subset(aghy_occ_raw,(!is.na(lat))&(!is.na(lon))) # here we remove erroneous coordinates, where either the latitude or longitude is missing
cat(nrow(aghy_occ_raw)-nrow(aghy_occ), "records are removed") # Show the number of records that are removed from the dataset.
aghy_occ %>%
dplyr::select(country,lon, lat, year,basisOfRecord)%>%
filter(country=="United States")->aghy_occ_clean # We want only occurrence data for the US
dups_aghy <- duplicated(aghy_occ_clean[c("lat","lon")]  )
aghy_occ_unique <- aghy_occ_clean[!dups_aghy,] # Remove duplicated data based on latitude and longitude
cat(nrow(aghy_occ_clean)-nrow(aghy_occ_unique), "records are removed")
table(aghy_occ_unique$basisOfRecord) # show the frequency table of “basisOfRecord”
hist(aghy_occ_unique$year,main="",xlim=c(1895,2020),ylim=c(0,500),col="orange2",xlab="years")
aghy_occ_unique %>%
dplyr::select(lon, lat, year)%>%
filter(year %in% (1990:2020) & as.numeric(lon >=-126.374160))->aghy_occ_1990_2020 #  filter from 1990 to 2020 to match climatic data.
aghy_occ_unique  %>%
dplyr::select(lon, lat, year)%>%
filter(year %in% (1895:1925) & as.numeric(lon >=-126.374160))->aghy_occ_1895_1925 #  filter from 1895 to 1925 to match climatic data.
summary(aghy_occ_1990_2020$year) # show a quick summary of years in the data
summary(aghy_occ_1895_1925$year) # show a quick summary of years in the data
aghy_occgeoref_1990_2020
endo_herb_georef %>%
dplyr::select(lon, lat, year,Spp_code)%>%
filter(Spp_code=="AGHY" & year %in% (1990:2020))->aghy_occgeoref_1990_2020
endo_herb_georef %>%
dplyr::select(lon, lat, year,Spp_code)%>%
filter(Spp_code=="AGHY" & year %in% (1895:1925))->aghy_occgeoref_1895_1925
aghy_occgeoref_1990_2020
endo_herb_georef %>%
dplyr::select(lon, lat, year,Spp_code)%>%
filter(Spp_code=="AGHY" & year %in% (1895:1925))->aghy_occgeoref_1895_1925
aghy_occgeoref_1895_1925
# aghy_occ_final_1990_2020<-rbind(aghy_occ_1990_2020[,-3],aghy_occgeoref_1990_2020[,-c(3,4)])
# aghy_occ_final_1895_1925<-rbind(aghy_occ_1895_1925[,-3],aghy_occgeoref_1895_1925[,-c(3,4)])
dupfinal1990_2020 <- duplicated(aghy_occgeoref_1990_2020[,c(1,2)])
dupfinal1895_1925 <- duplicated(aghy_occgeoref_1895_1925[,c(1,2)])
dupfinal1990_2020
dupfinal1895_1925
aghy_occ_unique_final_1990_2020 <- aghy_occgeoref_1990_2020[!dupfinal1990_2020,]
aghy_occ_unique_final_1895_1925<-aghy_occgeoref_1895_1925[!dupfinal1895_1925,]
aghy_occ_unique_final_1990_2020
aghy_occ_unique_final_1895_1925
ID<-rep("AGHY",nrow(aghy_occ_unique_final_1990_2020))
aghy_sdm_final_1990_2020<-data.frame(ID,aghy_occ_unique_final_1990_2020)
names(aghy_sdm_final_1990_2020)<-c("ID","Long","Lat")
thinned.aghy_recent <- spThin::thin(aghy_sdm_final_1990_2020,lat.col = "Lat",long.col = "Long",spec.col = "ID",
thin.par=9, reps=10, locs.thinned.list.return = FALSE,
write.files = TRUE, max.files = 5, out.dir="/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence",
out.base = "points_aghy_thinned_recent", write.log.file = TRUE,
log.file = "spatial_thin_aghy_recent_log.txt", verbose = TRUE)
aghy_thinned_recent<-read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/aghy_thinned_recent.csv", header=T)
aghy_thinned_recent
aghy_thinned<-aghy_thinned_recent[,-1]
library(maptools)
data(wrld_simpl)
plot(US_worldclim_recent_norm_stack_final,1)
plot(wrld_simpl, add=TRUE)
points(aghy_thinned, col='#0072B2',pch=19)
set.seed(13)
group_pres_aghy <- kfold(aghy_thinned, 5)
group_pres_aghy
pres_train_aghy <- aghy_thinned[group_pres_aghy != 1, ] # training data
pres_train_aghy
pres_test_aghy <- aghy_thinned[group_pres_aghy == 1, ] # testing data
pres_test_aghy
set.seed(13)
backg_aghy <- randomPoints(US_worldclim_recent_norm_stack_final, n=10000)
backg_aghy
colnames(backg_aghy) = c('Long', 'Lat')
group_backg_aghy <- kfold(backg_aghy, 5)
backg_train_aghy <- backg_aghy[group_backg_aghy != 1, ]
backg_test_aghy <- backg_aghy[group_backg_aghy == 1, ]
r <- raster(US_worldclim_recent_norm_stack_final, 1)
plot(!is.na(r), col=c('white', 'light grey'), legend=FALSE)
points(backg_train_aghy, pch='-', cex=0.5, col='#F0E442')
points(backg_test_aghy, pch='-',  cex=0.5, col='#000000')
points(pres_train_aghy, pch= '+', col='#009E73')
points(pres_test_aghy, pch='+', col='#0072B2')
h
mod_aghy <- maxent(US_worldclim_recent_norm_stack_final, pres_train_aghy)
# plot(mod_aghy)
e_aghy <- evaluate(pres_test_aghy, backg_test_aghy, mod_aghy, US_worldclim_recent_norm_stack_final)
e_aghy
map_recent_aghy <- predict(US_worldclim_recent_norm_stack_final, mod_aghy,  progress='')
map_old_aghy <- predict(US_worldclim_old_norm_stack_final, mod_aghy,  progress='')
par(mfrow=c(2,2))
plot(map_recent_aghy, main='2020')
plot(wrld_simpl, add=TRUE, border='dark grey')
plot(map_old_aghy, main='1925')
plot(wrld_simpl, add=TRUE, border='dark grey')
tr_aghy <- threshold(e_aghy, 'spec_sens')
tr_aghy
plot(map_recent_aghy > tr_aghy, main='2020')
plot(wrld_simpl, add=TRUE, border='dark grey')
plot(map_old_aghy > tr_aghy, main='1925')
plot(wrld_simpl, add=TRUE, border='dark grey')
e_aghy
e_aghy
library(maptools)
data(wrld_simpl)
plot(US_worldclim_recent_norm_stack_final,1)
plot(wrld_simpl, add=TRUE)
points(aghy_thinned, col='#0072B2',pch=19)
dev.off()
library(maptools)
data(wrld_simpl)
plot(US_worldclim_recent_norm_stack_final,1)
plot(wrld_simpl, add=TRUE)
points(aghy_thinned, col='#0072B2',pch=19)
# dir.create("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence")
# aghy_occ_raw <- gbif(genus="Agrostis",species="hyemalis",download=TRUE)
load("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/aghy_occ_raw.rdata")
head(aghy_occ_raw) # to view the first few records the occurrence dataset use
aghy_occ <- subset(aghy_occ_raw,(!is.na(lat))&(!is.na(lon))) # here we remove erroneous coordinates, where either the latitude or longitude is missing
cat(nrow(aghy_occ_raw)-nrow(aghy_occ), "records are removed") # Show the number of records that are removed from the dataset.
aghy_occ %>%
dplyr::select(country,lon, lat, year,basisOfRecord)%>%
filter(country=="United States")->aghy_occ_clean # We want only occurrence data for the US
dups_aghy <- duplicated(aghy_occ_clean[c("lat","lon")]  )
aghy_occ_unique <- aghy_occ_clean[!dups_aghy,] # Remove duplicated data based on latitude and longitude
cat(nrow(aghy_occ_clean)-nrow(aghy_occ_unique), "records are removed")
table(aghy_occ_unique$basisOfRecord) # show the frequency table of “basisOfRecord”
hist(aghy_occ_unique$year,main="",xlim=c(1895,2020),ylim=c(0,500),col="orange2",xlab="years")
aghy_occ_unique %>%
dplyr::select(lon, lat, year)%>%
filter(year %in% (1990:2020) & as.numeric(lon >=-126.374160))->aghy_occ_1990_2020 #  filter from 1990 to 2020 to match climatic data.
aghy_occ_unique  %>%
dplyr::select(lon, lat, year)%>%
filter(year %in% (1895:1925) & as.numeric(lon >=-126.374160))->aghy_occ_1895_1925 #  filter from 1895 to 1925 to match climatic data.
summary(aghy_occ_1990_2020$year) # show a quick summary of years in the data
summary(aghy_occ_1895_1925$year) # show a quick summary of years in the data
# aghy_occ_final_1990_2020<-rbind(aghy_occ_1990_2020[,-3],aghy_occgeoref_1990_2020[,-c(3,4)])
# aghy_occ_final_1895_1925<-rbind(aghy_occ_1895_1925[,-3],aghy_occgeoref_1895_1925[,-c(3,4)])
dupfinal1990_2020 <- duplicated(aghy_occ_1990_2020[,c(1,2)])
aghy_occ_unique_final_1990_2020 <- aghy_occ_1990_2020[!dupfinal1990_2020,]
library(maptools)
data(wrld_simpl)
plot(US_worldclim_recent_norm_stack_final,1)
plot(wrld_simpl, add=TRUE)
aghy_occ_unique_final_1990_2020
points(aghy_occ_unique_final_1990_2020[,1:2], col='#0072B2',pch=19)
# SDM  Epichloe endophyte host species
rm(list = ls())
library("prism")
library("raster")
library("dismo")
library("usdm")
library("car")
library("FactoMineR")
library("factoextra")
library("corrplot")
library("ENMTools")
library("vip")
library("pdp")
library("fastshap")
library("CalibratR")
library("maptools")
library("rgeos")
library("leaflet")
library("tidyverse")
# install.extras()
library("geodata")
library("terra")
library("rgdal")
library("sp")
library("ENMeval")
library("mecofun")
library("mgcv")
library("randomForest")
library("spThin")
# if(Sys.info()["sysname"] != "Windows" ){
#   dyn.load('/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/lib/server/libjvm.dylib')
# }
library("rJava")
set.seed(13)
# Climatic data----
## Data from PRISM----
# making a folder to store prism data
prism_set_dl_dir("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Clim")
tmean_annual_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020))))
tmean_spring_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020, mon = 1:4))))
tmean_summer_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020, mon = 5:8))))
tmean_autumn_recent_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1990:2020, mon = 9:12))))
tmean_annual_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925))))
tmean_spring_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925, mon = 1:4))))
tmean_summer_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925, mon = 5:8))))
tmean_autumn_old_norm <- terra::mean(terra::rast(pd_stack(prism_archive_subset(type = "tmean", temp_period = "monthly", year = 1895:1925, mon = 9:12))))
ppt_annual_recent <- ppt_spring_recent <- ppt_summer_recent <- ppt_autumn_recent <- ppt_winter_recent<- list()
for(y in 1990:2020){
ppt_annual_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y))))
ppt_spring_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 1:4))))
ppt_summer_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 5:8))))
ppt_autumn_recent[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 9:12))))
}
ppt_annual_old <- ppt_spring_old <- ppt_summer_old <- ppt_autumn_old <- ppt_winter_old<- list()
for(y in 1895:1925){
ppt_annual_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y))))
ppt_spring_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 1:4))))
ppt_summer_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 5:8))))
ppt_autumn_old[[y]] <- sum(terra::rast(pd_stack(prism_archive_subset(type = "ppt", temp_period = "monthly", year = y, mon = 9:12)))) # including December here because the year needs to wrap around...
}
ppt_annual_recent_norm <- terra::mean(terra::rast(unlist(ppt_annual_recent)))
ppt_spring_recent_norm <- terra::mean(terra::rast(unlist(ppt_spring_recent)))
ppt_summer_recent_norm <- terra::mean(terra::rast(unlist(ppt_summer_recent)))
ppt_autumn_recent_norm <- terra::mean(terra::rast(unlist(ppt_autumn_recent)))
ppt_annual_old_norm <- terra::mean(terra::rast(unlist(ppt_annual_old)))
ppt_spring_old_norm <- terra::mean(terra::rast(unlist(ppt_spring_old)))
ppt_summer_old_norm <- terra::mean(terra::rast(unlist(ppt_summer_old)))
ppt_autumn_old_norm <- terra::mean(terra::rast(unlist(ppt_autumn_old)))
## Variance inflation factor (VIF)  to have  a measure of multicollinearity among the  variables----
US_worldclim_recent_norm<-terra::rast(list(tmean_spring_recent_norm,tmean_summer_recent_norm,tmean_autumn_recent_norm,ppt_spring_recent_norm,ppt_summer_recent_norm,ppt_autumn_recent_norm))
US_worldclim_recent_norm_stack<-stack(US_worldclim_recent_norm)
plot(US_worldclim_recent_norm_stack)
# (var_vif<-usdm::vifstep(US_worldclim_recent_norm_stack, th=10))
(vif <- vifcor(US_worldclim_recent_norm_stack, th=0.7))
US_worldclim_recent_norm_stack_vif<-terra::rast(list(tmean_spring_recent_norm,ppt_spring_recent_norm,ppt_summer_recent_norm))
names(US_worldclim_recent_norm_stack_vif) <- c("tmean_spring", "ppt_spring","ppt_summer")
US_worldclim_recent_norm_stack_final<-stack(US_worldclim_recent_norm_stack_vif)
plot(US_worldclim_recent_norm_stack_final)
US_worldclim_old_norm_stack_vif<-terra::rast(list(tmean_spring_old_norm,ppt_spring_old_norm,ppt_summer_old_norm))
names(US_worldclim_old_norm_stack_vif) <- c("tmean_spring", "ppt_spring","ppt_summer")
US_worldclim_old_norm_stack_final<-stack(US_worldclim_old_norm_stack_vif)
plot(US_worldclim_old_norm_stack_final)
# Agrostis hyemalis-----
## Import occurrence data from database and merge them later to existing online data
endo_herb_georef<-read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/filtered_endo_herb_georef.csv", header=T)
## Download occurrence data from gbif for *Agrostis hyemalis*
# dir.create("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence")
# aghy_occ_raw <- gbif(genus="Agrostis",species="hyemalis",download=TRUE)
load("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/aghy_occ_raw.rdata")
unique(endo_herb_georef$Country)
# names(aghy_occ_raw)
# Clean occurrence data from gbif
aghy_occ <- subset(aghy_occ_raw,(!is.na(lat))&(!is.na(lon))&!is.na(country)) # here we remove erroneous coordinates, where either the latitude or longitude is missing
cat(nrow(aghy_occ_raw)-nrow(aghy_occ), "records are removed") # Show the number of records that are removed from the dataset.
aghy_occ %>%
dplyr::select(country,lon, lat, year,basisOfRecord)%>%
filter(country=="United States")->aghy_occ_clean # We want only occurrence data for the US
dups_aghy <- duplicated(aghy_occ_clean[c("lat","lon")]  )
aghy_occ_unique <- aghy_occ_clean[!dups_aghy,] # Remove duplicated data based on latitude and longitude
cat(nrow(aghy_occ_clean)-nrow(aghy_occ_unique), "records are removed")
table(aghy_occ_unique$basisOfRecord) # show the frequency table of “basisOfRecord”
hist(aghy_occ_unique$year,main="",xlim=c(1895,2020),ylim=c(0,500),col="orange2",xlab="years")
aghy_occ_unique %>%
dplyr::select(lon, lat, year,country)%>%
filter(year %in% (1895:2020) & as.numeric(lon >=-110.374160))->aghy_occ_1895_2020 #  filter from 1895 to 2020
summary(aghy_occ_1895_2020$year) # show a quick summary of years in the data
unique(aghy_occ$country)
aghy_occ_1895_2020
summary(aghy_occ_1895_2020$year) # show a quick summary of years in the data
## Subset only AGHY records that in the US
endo_herb_georef %>%
dplyr::select(lon, lat, year,Spp_code,Country)%>%
filter(Spp_code=="AGHY" & Country=="United States" & year %in% (1895:2020)) %>%
rename(country=Country)->aghy_occgeoref_1895_2020
aghy_occgeoref_1895_2020
aghy_occ_1895_2020
aghy_occgeoref_1895_2020
## Merge data from the database to GBIF  data
aghy_occ_final_1895_2020<-rbind(aghy_occ_1895_2020[,-3],aghy_occgeoref_1895_2020[,-c(3,4)])
dupfinal1895_2020 <- duplicated(aghy_occ_final_1895_2020[,c(1,2)])
aghy_occ_unique_final_1895_2020 <- aghy_occ_final_1895_2020[!dupfinal1895_2020,]
unique(aghy_occ_unique_final_1895_2020$country)
library(maptools)
data(wrld_simpl)
coordinates(aghy_occ_unique_final_1895_2020) <- ~lon+lat
crs(aghy_occ_unique_final_1895_2020) <- crs(wrld_simpl)
ovr_aghy_1895_2020 <- over(aghy_occ_unique_final_1895_2020, wrld_simpl)
head(ovr_aghy_1990_2020)
data(wrld_simpl)
coordinates(aghy_occ_unique_final_1895_2020) <- ~lon+lat
crs(aghy_occ_unique_final_1895_2020) <- crs(wrld_simpl)
## Cross-check coordinates by visual
library(maptools)
data(wrld_simpl)
coordinates(aghy_occ_unique_final_1895_2020) <- ~lon+lat
ovr_aghy_1895_2020 <- over(aghy_occ_unique_final_1895_2020, wrld_simpl)
head(ovr_aghy_1895_2020)
ctr_aghy_1895_2020 <- ovr_aghy_1895_2020$NAME
i_aghy_1895_2020 <- which(is.na(ctr_aghy_1895_2020)) # points (identified by their record numbers) do not match any country (that is, they are in an ocean)
i_aghy_1895_2020
aghy_occ_unique_final_1895_2020[122,]
aghy_occ_unique_final_1895_2020[!i_aghy_1895_2020,]
j_aghy_1895_2020 <- which(ctr_aghy_1895_2020 != aghy_occ_unique_final_1895_2020$country)
cbind(ctr_aghy_1895_2020, aghy_occ_unique_final_1895_2020$country)[j,]
cbind(ctr_aghy_1895_2020, aghy_occ_unique_final_1895_2020$country)[j_aghy_1895_2020,]
plot(aghy_occ_unique_final_1895_2020)
plot(wrld_simpl, add=T, border='blue', lwd=2)
plot(aghy_occ_unique_final_1895_2020,col="grey")
plot(wrld_simpl, add=T, border='black', lwd=2)
## Spatial thinning of species occurence records
r_aghy_1895_2020 <- raster(aghy_occ_unique_final_1895_2020) # create a RasterLayer with the extent of aghy_occ_unique_final_1990_2020
res(r_aghy_1895_2020) <- 0.04166667 # set the resolution of the cells
r_aghy_1895_2020 <- extend(r_aghy_1895_2020, extent(r_aghy_1895_2020)+1) # expand (extend) the extent of the RasterLayer a little
aghy_occ_sampled_final_1895_2020 <- gridSample(aghy_occ_unique_final_1895_2020, r_aghy_1895_2020, n=1)
p_aghy_1895_2020 <- rasterToPolygons(r_aghy_1895_2020)
# points(aghy_occ_sampled_final_1990_2020, cex=1, col='red', pch='x')
aghy_occ_sampled_final_1895_2020<-as.data.frame(aghy_occ_sampled_final_1895_2020)
write_csv(aghy_occ_sampled_final_1990_2020,"/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/aghy_thinned.csv")
write_csv(aghy_occ_sampled_final_1895_2020,"/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/Herbaruim Project/Data/Occurence/aghy_thinned.csv")
## Projection on a map to double check if there is any point out of the US
plot(US_worldclim_recent_norm_stack_final,1)
plot(wrld_simpl, add=TRUE)
points(aghy_occ_sampled_final_1990_2020, col='#0072B2',pch=19)
points(aghy_occ_sampled_final_1895_2020, col='#0072B2',pch=19)
## Maxent model for *Agrostis hyemalis*----
aghy_thinned<-aghy_occ_sampled_final_1895_2020
coordinates(aghy_thinned) <- ~ lon + lat
crs(aghy_thinned)
myCRS1 <- CRS("+init=epsg:4326") # WGS 84
crs(aghy_thinned) <- myCRS1 # Define the coordinate system that will be used
Aghy_bg <- sampleRandom(x=US_worldclim_recent_norm_stack_final,
size=10000,
na.rm=T, #removes the 'Not Applicable' points
sp=T) # return spatial points
aghy_selected <- sample(1:nrow(aghy_occ_sampled_final_1895_2020),nrow(aghy_occ_sampled_final_1895_2020)*0.75)
aghy_train <- aghy_occ_sampled_final_1895_2020[aghy_selected,] # this is the selection to be used for model training
aghy_test <- aghy_occ_sampled_final_1895_2020[-aghy_selected,] # this is the opposite of the selection which will be used for model testing
env_aghy_train <- raster::extract(US_worldclim_recent_norm_stack_final,aghy_train)
env_aghy_test <- raster::extract(US_worldclim_recent_norm_stack_final,aghy_test)
env_aghy_bg <- raster::extract(US_worldclim_recent_norm_stack_final,Aghy_bg)
aghyPredictors <- rbind(env_aghy_train,env_aghy_bg)
aghyPredictors<-as.data.frame(aghyPredictors)
aghyResponse <- c(rep(1,nrow(env_aghy_train)),
rep(0,nrow(env_aghy_bg)))
library(dismo)
maxent()
mod_aghy <- maxent(aghyPredictors,aghyResponse)
maxent()
aghyPredictors
aghyResponse
mod_aghy <- maxent(aghyPredictors,aghyResponse)
mod_aghy <- dismo::maxent(aghyPredictors,aghyResponse)
aghy_selected <- sample(1:nrow(aghy_thinned),nrow(aghy_thinned)*0.75)
data.frame(aghy_thinned)
aghy_selected <- sample(1:nrow(aghy_occ_sampled_final_1895_2020),nrow(aghy_occ_sampled_final_1895_2020)*0.75)
aghy_selected
aghy_train <- aghy_occ_sampled_final_1895_2020[aghy_selected,] # this is the selection to be used for model training
dim(aghy_train)
dim(aghy_test)
aghy_test <- aghy_occ_sampled_final_1895_2020[-aghy_selected,] # this is the opposite of the selection which will be used for model testing
env_aghy_train <- raster::extract(US_worldclim_recent_norm_stack_final,aghy_train)
env_aghy_test <- raster::extract(US_worldclim_recent_norm_stack_final,aghy_test)
env_aghy_bg <- raster::extract(US_worldclim_recent_norm_stack_final,Aghy_bg)
aghyPredictors <- rbind(env_aghy_train,env_aghy_bg)
aghyPredictors
aghyPredictors<-as.data.frame(aghyPredictors)
aghyResponse <- c(rep(1,nrow(env_aghy_train)),
rep(0,nrow(env_aghy_bg)))
mod_aghy <- dismo::maxent(aghyPredictors,aghyResponse)
library(rJava)
R.version
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_121') # for 64-bit version
library(dismo)
maxent()
mod_aghy <- dismo::maxent(aghyPredictors,aghyResponse)
remove.packages("dismo")
install.packages("dismo")
mod_aghy <- dismo::maxent(aghyPredictors,aghyResponse)
install.packages("devtools")
devtools::install_github("snowflakedb/dplyr-snowflakedb")
library(dplyr)
library(dplyr.snowflakedb)
options(dplyr.jdbc.classpath = "/home/snowman/Downloads/snowflake_jdbc.jar")
